% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api-clean.R
\name{drake_gc}
\alias{drake_gc}
\title{Do garbage collection on the drake cache.}
\usage{
drake_gc(path = NULL, search = NULL, verbose = 1L,
  cache = drake::drake_cache(path = path, verbose = verbose),
  force = FALSE)
}
\arguments{
\item{path}{Path to a \code{drake} cache
(usually a hidden \code{.drake/} folder) or \code{NULL}.}

\item{search}{Deprecated.}

\item{verbose}{Integer, control printing to the console/terminal.
\itemize{
\item \code{0}: print nothing.
\item \code{1}: print targets, retries, and failures.
\item \code{2}: also show a spinner when preprocessing tasks are underway.
}}

\item{cache}{drake cache. See \code{\link[=new_cache]{new_cache()}}.
If supplied, \code{path} is ignored.}

\item{force}{Logical, whether to load the cache
despite any back compatibility issues with the
running version of drake.}
}
\value{
\code{NULL}
}
\description{
The cache is a key-value store.
By default, the \code{\link[=clean]{clean()}} function removes
values, but not keys.
Garbage collection removes the remaining dangling files.
}
\examples{
\dontrun{
isolate_example("Quarantine side effects.", {
if (suppressWarnings(require("knitr"))) {
load_mtcars_example() # Get the code with drake_example("mtcars").
make(my_plan) # Run the project, build the targets.
# At this point, check the size of the '.drake/' cache folder.
# Clean without garbage collection.
clean(garbage_collection = FALSE)
# The '.drake/' cache folder is still about the same size.
drake_gc() # Do garbage collection on the cache.
# The '.drake/' cache folder should have gotten much smaller.
}
})
}
}
\seealso{
\code{\link[=clean]{clean()}}
}
