% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-deprecate.R
\name{reduce_by}
\alias{reduce_by}
\title{Deprecated: reduce multiple groupings of targets}
\usage{
reduce_by(plan, ..., prefix = "target", begin = "", op = " + ",
  end = "", pairwise = TRUE, append = TRUE, filter = NULL,
  sep = "_")
}
\arguments{
\item{plan}{Workflow plan data frame of prespecified targets.}

\item{...}{Symbols, columns of \code{plan} to define target groupings.
A \code{reduce_plan()} call is applied for each grouping.
Groupings with all \code{NA}s in the selector variables are ignored.}

\item{prefix}{Character, prefix for naming the new targets.
Suffixes are generated from the values of the columns
specified in \code{...}.}

\item{begin}{Character, code to place at the beginning
of each step in the reduction.}

\item{op}{Binary operator to apply in the reduction}

\item{end}{Character, code to place at the end
of each step in the reduction.}

\item{pairwise}{Logical, whether to create multiple
new targets, one for each pair/step in the reduction (\code{TRUE}),
or to do the reduction all in one command.}

\item{append}{Logical. If \code{TRUE}, the output will include the
original rows in the \code{plan} argument.
If \code{FALSE}, the output will only include the new
targets and commands.}

\item{filter}{An expression like you would pass to \code{dplyr::filter()}.
The rows for which \code{filter} evaluates to \code{TRUE} will be gathered,
and the rest will be excluded from gathering.
Why not just call \code{dplyr::filter()} before \code{gather_by()}?
Because \code{gather_by(append = TRUE, filter = my_column == "my_value")}
gathers on some targets while including all the original targets
in the output. See the examples for a demonstration.}

\item{sep}{Character scalar, delimiter for creating the names
of new targets.}
}
\value{
A workflow plan data frame.
}
\description{
Deprecated on 2019-05-16. Use \code{\link[=drake_plan]{drake_plan()}}
transformations instead. See
\url{https://ropenscilabs.github.io/drake-manual/plans.html#large-plans}
for the details.
}
\details{
Perform several calls to \code{reduce_plan()}
based on groupings from columns in the plan,
and then row-bind the new targets to the plan.
}
\examples{
\dontrun{
suppressWarnings({
plan <- drake_plan(
  data = get_data(),
  informal_look = inspect_data(data, mu = mu__),
  bayes_model = bayesian_model_fit(data, prior_mu = mu__)
)
plan <- evaluate_plan(plan, rules = list(mu__ = 1:2), trace = TRUE)
plan
reduce_by(plan, mu___from, begin = "list(", end = ")", op = ", ")
reduce_by(plan, mu__)
reduce_by(plan, mu__, append = TRUE)
reduce_by(plan, mu__, append = FALSE)
reduce_by(plan) # Reduce all the targets.
reduce_by(plan, append = FALSE)
reduce_by(plan, pairwise = FALSE)
# You can filter out the informal_look_* targets beforehand
# if you only want the bayes_model_* ones to be reduced.
# The advantage here is that if you also need `append = TRUE`,
# only the bayes_model_* targets will be reduced, but
# the informal_look_* targets will still be included
# in the output.
reduce_by(
  plan,
  mu___from,
  append = TRUE,
  filter = mu___from == "bayes_model"
)
})
}
}
\seealso{
\code{\link[=drake_plan]{drake_plan()}}
}
\keyword{internal}
