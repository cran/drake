% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cache.R
\name{configure_cache}
\alias{configure_cache}
\title{Configure the hash algorithms, etc. of a drake cache.}
\usage{
configure_cache(cache = drake::get_cache(verbose = verbose),
  short_hash_algo = drake::default_short_hash_algo(cache = cache),
  long_hash_algo = drake::default_long_hash_algo(cache = cache),
  log_progress = FALSE, overwrite_hash_algos = FALSE,
  verbose = drake::default_verbose(), jobs = 1,
  init_common_values = FALSE)
}
\arguments{
\item{cache}{cache to configure}

\item{short_hash_algo}{short hash algorithm for drake.
The short algorithm must be among \code{\link[=available_hash_algos]{available_hash_algos()}},
which is just the collection of algorithms available to the \code{algo}
argument in \code{\link[digest:digest]{digest::digest()}}.
See \code{\link[=default_short_hash_algo]{default_short_hash_algo()}} for more.}

\item{long_hash_algo}{long hash algorithm for drake.
The long algorithm must be among \code{\link{available_hash_algos}{}},
which is just the collection of algorithms available to the \code{algo}
argument in \code{digest::digest()}.
See \code{\link[=default_long_hash_algo]{default_long_hash_algo()}} for more.}

\item{log_progress}{deprecated logical.
Previously toggled whether to clear the recorded
build progress if this cache was used for previous calls to
\code{\link[=make]{make()}}.}

\item{overwrite_hash_algos}{logical, whether to try to overwrite
the hash algorithms in the cache with any user-specified ones.}

\item{verbose}{logical or numeric, control printing to the console.
Use \code{pkgconfig} to set the default value of \code{verbose}
for your R session:
for example, \code{pkgconfig::set_config("drake::verbose" = 2)}.
\describe{
\item{0 or \code{FALSE}:}{print nothing.}
\item{1 or \code{TRUE}:}{print only targets to build.}
\item{2:}{in addition, print checks and cache info.}
\item{3:}{in addition, print any potentially missing items.}
\item{4:}{in addition, print imports. Full verbosity.}
}}

\item{jobs}{number of jobs for parallel processing}

\item{init_common_values}{logical, whether to set the initial \code{drake}
version in the cache and other common values.
Not always a thread safe operation, so should only be \code{TRUE}
on the master process}
}
\value{
A drake/storr cache.
}
\description{
The purpose of this function is
to prepare the cache to be called from \code{\link[=make]{make()}}.
}
\examples{
\dontrun{
test_with_dir("Quarantine side effects.", {
clean(destroy = TRUE)
load_mtcars_example() # Get the code with drake_example("mtcars").
config <- make(my_plan) # Run the project, build all the targets.
# Locate the drake/storr cache of the project
# inside the master internal configuration list.
cache <- config$cache
long_hash(cache) # Return the long hash algorithm used.
# Change the long hash algorithm of the cache.
cache <- configure_cache(
  cache = cache,
  long_hash_algo = "murmur32",
  overwrite_hash_algos = TRUE
)
long_hash(cache) # Show the new long hash algorithm.
make(my_plan) # Changing the long hash puts the targets out of date.
})
}
}
\seealso{
\code{\link[=default_short_hash_algo]{default_short_hash_algo()}},
\code{\link[=default_long_hash_algo]{default_long_hash_algo()}}
}
