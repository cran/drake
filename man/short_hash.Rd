% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hash.R
\name{short_hash}
\alias{short_hash}
\title{Get the short hash algorithm of a drake cache.}
\usage{
short_hash(cache = drake::get_cache(verbose = verbose),
  verbose = drake::default_verbose())
}
\arguments{
\item{cache}{drake cache. See \code{\link[=new_cache]{new_cache()}}.
If supplied, \code{path} and \code{search} are ignored.}

\item{verbose}{logical or numeric, control printing to the console.
Use \code{pkgconfig} to set the default value of \code{verbose}
for your R session:
for example, \code{pkgconfig::set_config("drake::verbose" = 2)}.
\describe{
\item{0 or \code{FALSE}:}{print nothing.}
\item{1 or \code{TRUE}:}{print only targets to build.}
\item{2:}{+ checks and cache info.}
\item{3:}{+ any potentially missing items.}
\item{4:}{+ imports and writes to the cache.}
}}
}
\value{
A character vector naming a hash algorithm.
}
\description{
See the advanced storage tutorial
at \url{https://ropenscilabs.github.io/drake-manual/store.html}
for details.
}
\examples{
\dontrun{
test_with_dir("Quarantine side effects.", {
load_mtcars_example() # Get the code with drake_example("mtcars").
# Run the project and return the internal master configuration list.
config <- make(my_plan)
# Locate the storr cache.
cache <- config$cache
# Get the short hash algorithm of the cache.
short_hash(cache)
})
}
}
\seealso{
\code{\link[=default_short_hash_algo]{default_short_hash_algo()}},
\code{\link[=default_long_hash_algo]{default_long_hash_algo()}}
}
