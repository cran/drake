% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dependencies.R
\name{deps}
\alias{deps}
\title{List the dependencies of a function, workflow plan command,
or knitr report source file.}
\usage{
deps(x)
}
\arguments{
\item{x}{Either a function or a string.
Strings are commands from your workflow plan data frame.}
}
\value{
A character vector, names of dependencies.
Files wrapped in single quotes.
The other names listed are functions or generic R objects.
}
\description{
Intended for debugging and checking your project.
The dependency structure of the components of your analysis
decides which targets are built and when.
}
\details{
If the argument is a double-quoted string that points to
a dynamic knitr report, the dependencies of the expected compiled
output will be given. For example, \code{deps(file_store("report.Rmd"))}
will return target names found in calls to \code{\link[=loadd]{loadd()}}
and \code{\link[=readd]{readd()}} in active code chunks. The \code{\link[=file_store]{file_store()}} function
(alerts \code{drake} utility functions to file names by double-quoting them.)
These \code{\link[=loadd]{loadd()}}/\code{\link[=readd]{readd()}} targets are needed
in order to run \code{knit(knitr_in("report.Rmd"))}
to produce the output file \code{"report.md"}, so technically,
they are dependencies of \code{"report.md"}, not \code{"report.Rmd"}.

\code{Drake} takes special precautions so that a target/import
does not depend on itself. For example, \code{deps(f)`` might return}"f"\code{if}f()` is a recursive function, but \code{\link[=make]{make()}} just ignores
this conflict and runs as expected. In other words, \code{\link[=make]{make()}}
automatically removes all self-referential loops in the dependency
network.
}
\examples{
# Your workflow likely depends on functions in your workspace.
f <- function(x, y){
  out <- x + y + g(x)
  saveRDS(out, 'out.rds')
}
# Find the dependencies of f. These could be R objects/functions
# in your workspace or packages. Any file names or target names
# will be ignored.
deps(f)
# Define a workflow plan data frame that uses your function f().
my_plan <- drake_plan(
  x = 1 + some_object,
  my_target = x + readRDS(file_in("tracked_input_file.rds")),
  return_value = f(x, y, g(z + w)),
  strings_in_dots = "literals"
)
# Get the dependencies of workflow plan commands.
# Here, the dependencies could be R functions/objects from your workspace
# or packages, imported files, or other targets in the workflow plan.
deps(my_plan$command[1])
deps(my_plan$command[2])
deps(my_plan$command[3])
\dontrun{
test_with_dir("Quarantine side effects.", {
load_basic_example() # Get the code with drake_example("basic").
# Dependencies of the knitr-generated targets like 'report.md'
# include targets/imports referenced with `readd()` or `loadd()`.
deps(file_store("report.Rmd"))
})
}
}
