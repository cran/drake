% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build_drake_graph.R
\name{build_drake_graph}
\alias{build_drake_graph}
\title{Create the \code{igraph} dependency network of your project.}
\usage{
build_drake_graph(plan = read_drake_plan(), targets = plan$target,
  envir = parent.frame(), verbose = drake::default_verbose(),
  jobs = 1, sanitize_plan = FALSE, console_log_file = NULL,
  trigger = drake::trigger(), cache = NULL)
}
\arguments{
\item{plan}{workflow plan data frame.
A workflow plan data frame is a data frame
with a \code{target} column and a \code{command} column.
(See the details in the \code{\link[=drake_plan]{drake_plan()}} help file
for descriptions of the optional columns.)
Targets are the objects and files that drake generates,
and commands are the pieces of R code that produce them.
Use the function \code{\link[=drake_plan]{drake_plan()}} to generate workflow plan
data frames easily, and see functions \code{\link[=plan_analyses]{plan_analyses()}},
\code{\link[=plan_summaries]{plan_summaries()}}, \code{\link[=evaluate_plan]{evaluate_plan()}},
\code{\link[=expand_plan]{expand_plan()}}, and \code{\link[=gather_plan]{gather_plan()}} for
easy ways to generate large workflow plan data frames.}

\item{targets}{character vector, names of targets to build.
Dependencies are built too. Together, the \code{plan} and
\code{targets} comprise the workflow network
(i.e. the \code{graph} argument).
Changing either will change the network.}

\item{envir}{environment to use. Defaults to the current
workspace, so you should not need to worry about this
most of the time. A deep copy of \code{envir} is made,
so you don't need to worry about your workspace being modified
by \code{make}. The deep copy inherits from the global environment.
Wherever necessary, objects and functions are imported
from \code{envir} and the global environment and
then reproducibly tracked as dependencies.}

\item{verbose}{logical or numeric, control printing to the console.
Use \code{pkgconfig} to set the default value of \code{verbose}
for your R session:
for example, \code{pkgconfig::set_config("drake::verbose" = 2)}.
\describe{
\item{0 or \code{FALSE}:}{print nothing.}
\item{1 or \code{TRUE}:}{print only targets to build.}
\item{2:}{+ checks and cache info.}
\item{3:}{+ any potentially missing items.}
\item{4:}{+ imports and writes to the cache.}
}}

\item{jobs}{maximum number of parallel workers for processing the targets.
If you wish to parallelize the imports and preprocessing as well, you can
use a named numeric vector of length 2, e.g.
\code{make(jobs = c(imports = 4, targets = 8))}.
\code{make(jobs = 4)} is equivalent to \code{make(jobs = c(imports = 1, targets = 4))}.

Windows users should not set \code{jobs > 1} if
\code{parallelism} is \code{"mclapply"} because
\code{\link[=mclapply]{mclapply()}} is based on forking. Windows users
who use \code{parallelism = "Makefile"} will need to
download and install Rtools.

You can experiment with \code{\link[=predict_runtime]{predict_runtime()}}
to help decide on an appropriate number of jobs.
For details, visit
\url{https://ropenscilabs.github.io/drake-manual/time.html}.}

\item{sanitize_plan}{logical, deprecated. If you must,
call \code{drake:::sanitize_plan()} to sanitize the plan
and/or \code{drake:::sanitize_targets()} to sanitize the targets
(or just get \code{plan} and \code{targets} and \code{graph} from
\code{\link[=drake_config]{drake_config()}}).}

\item{console_log_file}{character scalar or \code{NULL}.
If \code{NULL}, console output will be printed
to the R console using \code{message()}.
Otherwise, \code{console_log_file} should be the name of a flat file.
Console output will be appended to that file.}

\item{trigger}{optional, a global trigger for building targets
(see \code{\link[=trigger]{trigger()}}).}

\item{cache}{an optional \code{storr} cache for memoization}
}
\value{
An igraph object representing
the workflow plan dependency network.
}
\description{
This function returns an igraph object representing how
the targets in your workflow plan data frame
depend on each other.
(\code{help(package = "igraph")}). To plot this graph, call
to \code{\link[=plot.igraph]{plot.igraph()}} on your graph. See the online manual
for enhanced graph visualization functionality.
}
\examples{
\dontrun{
test_with_dir("Quarantine side effects.", {
load_mtcars_example() # Get the code with drake_example("mtcars").
# Make the igraph network connecting all the targets and imports.
g <- build_drake_graph(my_plan)
class(g) # "igraph"
})
}
}
